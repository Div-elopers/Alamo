workflows:
  android-workflow:
    name: Android Workflow
    instance_type: mac_mini_m2
    max_build_duration: 120
    environment:
      vars:
        PACKAGE_NAME: "uy.edu.utec.alamo"
        ANDROID_KEYSTORE_BASE64: $ANDROID_KEYSTORE_BASE64
        ANDROID_KEYSTORE_PASSWORD: $ANDROID_KEYSTORE_PASSWORD
        ANDROID_KEY_ALIAS: $ANDROID_KEY_ALIAS
        ANDROID_KEY_ALIAS_PASSWORD: $ANDROID_KEY_ALIAS_PASSWORD
        FIREBASE_API_KEY_ANDROID: $FIREBASE_API_KEY_ANDROID
        FIREBASE_APP_ID_ANDROID: $FIREBASE_APP_ID_ANDROID
        FIREBASE_MESSAGING_SENDER_ID_ANDROID: $FIREBASE_MESSAGING_SENDER_ID_ANDROID
        FIREBASE_PROJECT_ID: $FIREBASE_PROJECT_ID
        FIREBASE_STORAGE_BUCKET: $FIREBASE_STORAGE_BUCKET
      flutter: stable
    scripts:
      - name: Generate firebase_options.dart for Android
        script: |
          echo "
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart' show defaultTargetPlatform, TargetPlatform;

          class DefaultFirebaseOptions {
            static const FirebaseOptions android = FirebaseOptions(
              apiKey: '$FIREBASE_API_KEY_ANDROID',
              appId: '$FIREBASE_APP_ID_ANDROID',
              messagingSenderId: '$FIREBASE_MESSAGING_SENDER_ID_ANDROID',
              projectId: '$FIREBASE_PROJECT_ID',
              storageBucket: '$FIREBASE_STORAGE_BUCKET',
            );

            static FirebaseOptions get currentPlatform {
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  return android;
                default:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions are not configured for this platform.',
                  );
              }
            }
          }
          " > lib/firebase_options.dart

      - name: Create .env file for Android
        script: |
          echo "MAPS_ANDROID_API_KEY=$MAPS_ANDROID_API_KEY" > .env
          echo "MAPS_ANDROID_ID=$MAPS_ANDROID_ID" >> .env

      - name: Generate keystore file
        script: |
          echo "Generating keystore file from environment variable..."
          echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > /tmp/my-release-key.keystore || echo "Error decoding keystore"

      - name: Validate keystore file generation
        script: |
          if [ -f /tmp/my-release-key.keystore ]; then
            echo "Keystore generated successfully."
          else
            echo "Failed to generate keystore."
            exit 1
          fi

      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"

      - name: Get Flutter packages
        script: |
          flutter packages pub get

      - name: Flutter analyze
        script: |
          flutter analyze

      - name: Flutter unit tests
        script: |
          flutter test
        ignore_failure: true

      - name: Build AAB with Flutter
        script: |
          BUILD_NUMBER=1      
          flutter build appbundle --release \
            --build-name=1.0.$BUILD_NUMBER \
            --build-number=$BUILD_NUMBER \
            --keystore /tmp/my-release-key.keystore \
            --keystore-password $ANDROID_KEYSTORE_PASSWORD \
            --key-alias $ANDROID_KEY_ALIAS \
            --key-password $ANDROID_KEY_ALIAS_PASSWORD

      - name: Build APK with Flutter
        script: |
          flutter build apk --release \
            --keystore /tmp/my-release-key.keystore \
            --keystore-password $ANDROID_KEYSTORE_PASSWORD \
            --key-alias $ANDROID_KEY_ALIAS \
            --key-password $ANDROID_KEY_ALIAS_PASSWORD

    artifacts:
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/*.apk
      - flutter_drive.log

    publishing:
      email:
        recipients:
          - ciro.gronrroz@estudiantes.utec.edu.uy
        notify:
          success: true
          failure: true
